from music21 import *
from collections import defaultdict 

class chordWrapper:
    notes = None
    intervals = {}
    inversion = None
    name = None

    def __init__(self, v1, v2, v3, v4):
        self.notes = [v1, v2, v3, v4]

    def analyze(self):
        for a in range(len(self.notes)-1):
            for b in range(a+1, len(self.notes)):
                self.intervals[(a,b)] = interval.Interval(self.notes[a], self.notes[b])

    def __str__(self):
        message = f''
        # message += f'{self.name}\n'
        message += f'{self.notes}\n'
        # message += f'{self.intervals}\n'
        return message

def parse_XML(filename):
    s = converter.parse(filename)

    voice_map = {}
    note_matrix = {}
    locations = set()
    for voice in s.recurse().voices:
        # map voice to number
        vox = str(voice)[-2]
        if vox not in voice_map:
            voice_map[vox] = len(voice_map)

        for no in voice.notes:
            measure_num = no.measureNumber
            offset = no.offset
            locations.add((measure_num, offset))
            note_matrix[(measure_num, offset, voice_map[vox])] = no

    chords = {}
    for location in locations:
        chords[location] = chordWrapper(note_matrix[(location[0], location[1], 0)], note_matrix[(location[0], location[1], 1)], note_matrix[(location[0], location[1], 2)], note_matrix[(location[0], location[1], 3)])

    return chords, locations

if __name__ == '__main__':
    chords, locations = parse_XML('AP Music Theory 2022 Q5.mxl')
    for location in locations:
        print(chords[location])